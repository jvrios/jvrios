{"ast":null,"code":"import GiphyService from 'C:\\Users\\Victor\\source\\repos\\jvrios\\ImagensApp\\ImagensApp\\ImagensApp\\Services\\GiphyService.cs'; // Import the GIF service\n\nexport default {\n  data() {\n    return {\n      query: '',\n      // To store the user's search query\n      loading: false,\n      // To indicate whether the search is in progress\n      error: null,\n      // To store any error message\n      gifs: [] // To store the GIF data received from the backend\n    };\n  },\n  methods: {\n    async search() {\n      this.loading = true; // Set loading to true when search begins\n      this.error = null; // Reset error message\n      try {\n        // Send a GET request to search GIFs\n        const response = await GiphyServiceService.searchGifs(this.query);\n\n        // Update the GIFs data with the search results\n        this.gifs = response.data;\n      } catch (error) {\n        // Handle specific errors\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          this.error = `Error: ${error.response.status} - ${error.response.data.message}`;\n        } else if (error.request) {\n          // The request was made but no response was received\n          this.error = 'Error: No response from server. Please try again later.';\n        } else {\n          // Something else happened in setting up the request that triggered an error\n          this.error = 'Error: Something went wrong. Please try again later.';\n        }\n      } finally {\n        this.loading = false; // Set loading to false when search is complete (success or error)\n      }\n    }\n  }\n};","map":{"version":3,"names":["GiphyService","data","query","loading","error","gifs","methods","search","response","GiphyServiceService","searchGifs","status","message","request"],"sources":["C:\\Users\\Victor\\source\\repos\\jvrios\\Frontend\\frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"text\" v-model=\"query\" placeholder=\"Search GIFs...\">\n    <button @click=\"search\">Search</button>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">{{ error }}</div>\n    <div v-if=\"gifs.length > 0\">\n      <h2>Search Results</h2>\n      <div class=\"gif-item\" v-for=\"gif in gifs\" :key=\"gif.id\">\n        <img :src=\"gif.url\" :alt=\"gif.title\">\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport GiphyService from 'C:\\Users\\Victor\\source\\repos\\jvrios\\ImagensApp\\ImagensApp\\ImagensApp\\Services\\GiphyService.cs'; // Import the GIF service\n\nexport default {\n  data() {\n    return {\n      query: '', // To store the user's search query\n      loading: false, // To indicate whether the search is in progress\n      error: null, // To store any error message\n      gifs: [], // To store the GIF data received from the backend\n    };\n  },\n  methods: {\n    async search() {\n      this.loading = true; // Set loading to true when search begins\n      this.error = null; // Reset error message\n      try {\n        // Send a GET request to search GIFs\n        const response = await GiphyServiceService.searchGifs(this.query);\n        \n        // Update the GIFs data with the search results\n        this.gifs = response.data;\n      } catch (error) {\n        // Handle specific errors\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          this.error = `Error: ${error.response.status} - ${error.response.data.message}`;\n        } else if (error.request) {\n          // The request was made but no response was received\n          this.error = 'Error: No response from server. Please try again later.';\n        } else {\n          // Something else happened in setting up the request that triggered an error\n          this.error = 'Error: Something went wrong. Please try again later.';\n        }\n      } finally {\n        this.loading = false; // Set loading to false when search is complete (success or error)\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add any CSS styles specific to this component */\n.gif-item {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"AAgBA,OAAOA,YAAW,MAAO,+FAA+F,EAAE;;AAE1H,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MAAE;MACXC,OAAO,EAAE,KAAK;MAAE;MAChBC,KAAK,EAAE,IAAI;MAAE;MACbC,IAAI,EAAE,EAAE,CAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI,CAACJ,OAAM,GAAI,IAAI,EAAE;MACrB,IAAI,CAACC,KAAI,GAAI,IAAI,EAAE;MACnB,IAAI;QACF;QACA,MAAMI,QAAO,GAAI,MAAMC,mBAAmB,CAACC,UAAU,CAAC,IAAI,CAACR,KAAK,CAAC;;QAEjE;QACA,IAAI,CAACG,IAAG,GAAIG,QAAQ,CAACP,IAAI;MAC3B,EAAE,OAAOG,KAAK,EAAE;QACd;QACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;UAClB;UACA,IAAI,CAACJ,KAAI,GAAI,UAAUA,KAAK,CAACI,QAAQ,CAACG,MAAM,MAAMP,KAAK,CAACI,QAAQ,CAACP,IAAI,CAACW,OAAO,EAAE;QACjF,OAAO,IAAIR,KAAK,CAACS,OAAO,EAAE;UACxB;UACA,IAAI,CAACT,KAAI,GAAI,yDAAyD;QACxE,OAAO;UACL;UACA,IAAI,CAACA,KAAI,GAAI,sDAAsD;QACrE;MACF,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK,EAAE;MACxB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}