{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 2\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Search Results\", -1 /* HOISTED */));\nconst _hoisted_5 = [\"src\", \"alt\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    placeholder: \"Search GIFs...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.query]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.search && $options.search(...args))\n  }, \"Search\"), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading...\")) : _createCommentVNode(\"v-if\", true), $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.gifs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.gifs, gif => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"gif-item\",\n      key: gif.id\n    }, [_createElementVNode(\"img\", {\n      src: gif.url,\n      alt: gif.title\n    }, null, 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementVNode","_createElementBlock","type","_cache","$event","$data","query","placeholder","onClick","args","$options","search","loading","_hoisted_1","_createCommentVNode","error","_hoisted_2","_toDisplayString","gifs","length","_hoisted_3","_hoisted_4","_Fragment","_renderList","gif","class","id","src","url","alt","title","_hoisted_5"],"sources":["C:\\Users\\Victor\\source\\repos\\jvrios\\Frontend\\frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"text\" v-model=\"query\" placeholder=\"Search GIFs...\">\n    <button @click=\"search\">Search</button>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">{{ error }}</div>\n    <div v-if=\"gifs.length > 0\">\n      <h2>Search Results</h2>\n      <div class=\"gif-item\" v-for=\"gif in gifs\" :key=\"gif.id\">\n        <img :src=\"gif.url\" :alt=\"gif.title\">\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport GiphyService from 'C:\\Users\\Victor\\source\\repos\\jvrios\\ImagensApp\\ImagensApp\\ImagensApp\\Services\\GiphyService.cs'; // Adjust the import path based on your project structure\n\nexport default {\n  data() {\n    return {\n      query: '', // To store the user's search query\n      loading: false, // To indicate whether the search is in progress\n      error: null, // To store any error message\n      gifs: [], // To store the GIF data received from the backend\n    };\n  },\n  methods: {\n    async search() {\n      this.loading = true; // Set loading to true when search begins\n      this.error = null; // Reset error message\n      try {\n        // Send a GET request to search GIFs using the GiphyService\n        const response = await GiphyService.searchGifs(this.query);\n        \n        // Update the GIFs data with the search results\n        this.gifs = response.data;\n      } catch (error) {\n        // Handle specific errors\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          this.error = `Error: ${error.response.status} - ${error.response.data.message}`;\n        } else if (error.request) {\n          // The request was made but no response was received\n          this.error = 'Error: No response from server. Please try again later.';\n        } else {\n          // Something else happened in setting up the request that triggered an error\n          this.error = 'Error: Something went wrong. Please try again later.';\n        }\n      } finally {\n        this.loading = false; // Set loading to false when search is complete (success or error)\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add any CSS styles specific to this component */\n.gif-item {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":";;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;gEAOMC,mBAAA,CAAuB,YAAnB,gBAAc;mBAPxB;;uBACEC,mBAAA,CAWM,c,gBAVJD,mBAAA,CAAgE;IAAzDE,IAAI,EAAC,MAAM;IAFtB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEgCC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAnBF,KAAA,CAAAC,KAAK,E,GACjCN,mBAAA,CAAuC;IAA9BQ,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,QAAM,GACnBJ,KAAA,CAAAO,OAAO,I,cAAlBX,mBAAA,CAAoC,OAJxCY,UAAA,EAIwB,YAAU,KAJlCC,mBAAA,gBAKeT,KAAA,CAAAU,KAAK,I,cAAhBd,mBAAA,CAAmC,OALvCe,UAAA,EAAAC,gBAAA,CAKyBZ,KAAA,CAAAU,KAAK,oBAL9BD,mBAAA,gBAMeT,KAAA,CAAAa,IAAI,CAACC,MAAM,Q,cAAtBlB,mBAAA,CAKM,OAXVmB,UAAA,GAOMC,UAAuB,G,kBACvBpB,mBAAA,CAEMqB,SAAA,QAVZC,WAAA,CAQ0ClB,KAAA,CAAAa,IAAI,EAAXM,GAAG;yBAAhCvB,mBAAA,CAEM;MAFDwB,KAAK,EAAC,UAAU;MAAsB1B,GAAG,EAAEyB,GAAG,CAACE;QAClD1B,mBAAA,CAAqC;MAA/B2B,GAAG,EAAEH,GAAG,CAACI,GAAG;MAAGC,GAAG,EAAEL,GAAG,CAACM;4BATtCC,UAAA,E;sCAAAjB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}